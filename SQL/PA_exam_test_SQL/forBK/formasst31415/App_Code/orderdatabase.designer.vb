'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="orderdatabase")>  _
Partial Public Class orderdatabaseDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertcategory(instance As category)
    End Sub
  Partial Private Sub Updatecategory(instance As category)
    End Sub
  Partial Private Sub Deletecategory(instance As category)
    End Sub
  Partial Private Sub Insertcustomer(instance As customer)
    End Sub
  Partial Private Sub Updatecustomer(instance As customer)
    End Sub
  Partial Private Sub Deletecustomer(instance As customer)
    End Sub
  Partial Private Sub Insertmenu(instance As menu)
    End Sub
  Partial Private Sub Updatemenu(instance As menu)
    End Sub
  Partial Private Sub Deletemenu(instance As menu)
    End Sub
  Partial Private Sub Insertmenuitem(instance As menuitem)
    End Sub
  Partial Private Sub Updatemenuitem(instance As menuitem)
    End Sub
  Partial Private Sub Deletemenuitem(instance As menuitem)
    End Sub
  Partial Private Sub Insertorder(instance As [order])
    End Sub
  Partial Private Sub Updateorder(instance As [order])
    End Sub
  Partial Private Sub Deleteorder(instance As [order])
    End Sub
  Partial Private Sub Insertorderline(instance As orderline)
    End Sub
  Partial Private Sub Updateorderline(instance As orderline)
    End Sub
  Partial Private Sub Deleteorderline(instance As orderline)
    End Sub
  Partial Private Sub Insertrestaurant(instance As restaurant)
    End Sub
  Partial Private Sub Updaterestaurant(instance As restaurant)
    End Sub
  Partial Private Sub Deleterestaurant(instance As restaurant)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("orderdatabaseConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property categories() As System.Data.Linq.Table(Of category)
		Get
			Return Me.GetTable(Of category)
		End Get
	End Property
	
	Public ReadOnly Property customers() As System.Data.Linq.Table(Of customer)
		Get
			Return Me.GetTable(Of customer)
		End Get
	End Property
	
	Public ReadOnly Property menus() As System.Data.Linq.Table(Of menu)
		Get
			Return Me.GetTable(Of menu)
		End Get
	End Property
	
	Public ReadOnly Property menuitems() As System.Data.Linq.Table(Of menuitem)
		Get
			Return Me.GetTable(Of menuitem)
		End Get
	End Property
	
	Public ReadOnly Property orders() As System.Data.Linq.Table(Of [order])
		Get
			Return Me.GetTable(Of [order])
		End Get
	End Property
	
	Public ReadOnly Property orderlines() As System.Data.Linq.Table(Of orderline)
		Get
			Return Me.GetTable(Of orderline)
		End Get
	End Property
	
	Public ReadOnly Property restaurants() As System.Data.Linq.Table(Of restaurant)
		Get
			Return Me.GetTable(Of restaurant)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.category")>  _
Partial Public Class category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _categoryid As Integer
	
	Private _catdescription As String
	
	Private _restaurants As EntitySet(Of restaurant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncategoryidChanging(value As Integer)
    End Sub
    Partial Private Sub OncategoryidChanged()
    End Sub
    Partial Private Sub OncatdescriptionChanging(value As String)
    End Sub
    Partial Private Sub OncatdescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._restaurants = New EntitySet(Of restaurant)(AddressOf Me.attach_restaurants, AddressOf Me.detach_restaurants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property categoryid() As Integer
		Get
			Return Me._categoryid
		End Get
		Set
			If ((Me._categoryid = value)  _
						= false) Then
				Me.OncategoryidChanging(value)
				Me.SendPropertyChanging
				Me._categoryid = value
				Me.SendPropertyChanged("categoryid")
				Me.OncategoryidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_catdescription", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property catdescription() As String
		Get
			Return Me._catdescription
		End Get
		Set
			If (String.Equals(Me._catdescription, value) = false) Then
				Me.OncatdescriptionChanging(value)
				Me.SendPropertyChanging
				Me._catdescription = value
				Me.SendPropertyChanged("catdescription")
				Me.OncatdescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="category_restaurant", Storage:="_restaurants", ThisKey:="categoryid", OtherKey:="categoryid")>  _
	Public Property restaurants() As EntitySet(Of restaurant)
		Get
			Return Me._restaurants
		End Get
		Set
			Me._restaurants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_restaurants(ByVal entity As restaurant)
		Me.SendPropertyChanging
		entity.category = Me
	End Sub
	
	Private Sub detach_restaurants(ByVal entity As restaurant)
		Me.SendPropertyChanging
		entity.category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.customer")>  _
Partial Public Class customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _custemail As String
	
	Private _custusername As String
	
	Private _custquestion As String
	
	Private _custanswer As String
	
	Private _custtelno As String
	
	Private _custname As String
	
	Private _custaddress1 As String
	
	Private _custaddress2 As String
	
	Private _custaddress3 As String
	
	Private _custpostode As String
	
	Private _custcomment As String
	
	Private _custupdatedate As System.Nullable(Of Date)
	
	Private _customerid As Integer
	
	Private _orders As EntitySet(Of [order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustemailChanging(value As String)
    End Sub
    Partial Private Sub OncustemailChanged()
    End Sub
    Partial Private Sub OncustusernameChanging(value As String)
    End Sub
    Partial Private Sub OncustusernameChanged()
    End Sub
    Partial Private Sub OncustquestionChanging(value As String)
    End Sub
    Partial Private Sub OncustquestionChanged()
    End Sub
    Partial Private Sub OncustanswerChanging(value As String)
    End Sub
    Partial Private Sub OncustanswerChanged()
    End Sub
    Partial Private Sub OncusttelnoChanging(value As String)
    End Sub
    Partial Private Sub OncusttelnoChanged()
    End Sub
    Partial Private Sub OncustnameChanging(value As String)
    End Sub
    Partial Private Sub OncustnameChanged()
    End Sub
    Partial Private Sub Oncustaddress1Changing(value As String)
    End Sub
    Partial Private Sub Oncustaddress1Changed()
    End Sub
    Partial Private Sub Oncustaddress2Changing(value As String)
    End Sub
    Partial Private Sub Oncustaddress2Changed()
    End Sub
    Partial Private Sub Oncustaddress3Changing(value As String)
    End Sub
    Partial Private Sub Oncustaddress3Changed()
    End Sub
    Partial Private Sub OncustpostodeChanging(value As String)
    End Sub
    Partial Private Sub OncustpostodeChanged()
    End Sub
    Partial Private Sub OncustcommentChanging(value As String)
    End Sub
    Partial Private Sub OncustcommentChanged()
    End Sub
    Partial Private Sub OncustupdatedateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncustupdatedateChanged()
    End Sub
    Partial Private Sub OncustomeridChanging(value As Integer)
    End Sub
    Partial Private Sub OncustomeridChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orders = New EntitySet(Of [order])(AddressOf Me.attach_orders, AddressOf Me.detach_orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custemail", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property custemail() As String
		Get
			Return Me._custemail
		End Get
		Set
			If (String.Equals(Me._custemail, value) = false) Then
				Me.OncustemailChanging(value)
				Me.SendPropertyChanging
				Me._custemail = value
				Me.SendPropertyChanged("custemail")
				Me.OncustemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custusername", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property custusername() As String
		Get
			Return Me._custusername
		End Get
		Set
			If (String.Equals(Me._custusername, value) = false) Then
				Me.OncustusernameChanging(value)
				Me.SendPropertyChanging
				Me._custusername = value
				Me.SendPropertyChanged("custusername")
				Me.OncustusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custquestion", DbType:="NVarChar(50)")>  _
	Public Property custquestion() As String
		Get
			Return Me._custquestion
		End Get
		Set
			If (String.Equals(Me._custquestion, value) = false) Then
				Me.OncustquestionChanging(value)
				Me.SendPropertyChanging
				Me._custquestion = value
				Me.SendPropertyChanged("custquestion")
				Me.OncustquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custanswer", DbType:="NVarChar(50)")>  _
	Public Property custanswer() As String
		Get
			Return Me._custanswer
		End Get
		Set
			If (String.Equals(Me._custanswer, value) = false) Then
				Me.OncustanswerChanging(value)
				Me.SendPropertyChanging
				Me._custanswer = value
				Me.SendPropertyChanged("custanswer")
				Me.OncustanswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custtelno", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property custtelno() As String
		Get
			Return Me._custtelno
		End Get
		Set
			If (String.Equals(Me._custtelno, value) = false) Then
				Me.OncusttelnoChanging(value)
				Me.SendPropertyChanging
				Me._custtelno = value
				Me.SendPropertyChanged("custtelno")
				Me.OncusttelnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property custname() As String
		Get
			Return Me._custname
		End Get
		Set
			If (String.Equals(Me._custname, value) = false) Then
				Me.OncustnameChanging(value)
				Me.SendPropertyChanging
				Me._custname = value
				Me.SendPropertyChanged("custname")
				Me.OncustnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custaddress1", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property custaddress1() As String
		Get
			Return Me._custaddress1
		End Get
		Set
			If (String.Equals(Me._custaddress1, value) = false) Then
				Me.Oncustaddress1Changing(value)
				Me.SendPropertyChanging
				Me._custaddress1 = value
				Me.SendPropertyChanged("custaddress1")
				Me.Oncustaddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custaddress2", DbType:="NVarChar(100)")>  _
	Public Property custaddress2() As String
		Get
			Return Me._custaddress2
		End Get
		Set
			If (String.Equals(Me._custaddress2, value) = false) Then
				Me.Oncustaddress2Changing(value)
				Me.SendPropertyChanging
				Me._custaddress2 = value
				Me.SendPropertyChanged("custaddress2")
				Me.Oncustaddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custaddress3", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property custaddress3() As String
		Get
			Return Me._custaddress3
		End Get
		Set
			If (String.Equals(Me._custaddress3, value) = false) Then
				Me.Oncustaddress3Changing(value)
				Me.SendPropertyChanging
				Me._custaddress3 = value
				Me.SendPropertyChanged("custaddress3")
				Me.Oncustaddress3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custpostode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property custpostode() As String
		Get
			Return Me._custpostode
		End Get
		Set
			If (String.Equals(Me._custpostode, value) = false) Then
				Me.OncustpostodeChanging(value)
				Me.SendPropertyChanging
				Me._custpostode = value
				Me.SendPropertyChanged("custpostode")
				Me.OncustpostodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custcomment", DbType:="NVarChar(100)")>  _
	Public Property custcomment() As String
		Get
			Return Me._custcomment
		End Get
		Set
			If (String.Equals(Me._custcomment, value) = false) Then
				Me.OncustcommentChanging(value)
				Me.SendPropertyChanging
				Me._custcomment = value
				Me.SendPropertyChanged("custcomment")
				Me.OncustcommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custupdatedate", DbType:="DateTime")>  _
	Public Property custupdatedate() As System.Nullable(Of Date)
		Get
			Return Me._custupdatedate
		End Get
		Set
			If (Me._custupdatedate.Equals(value) = false) Then
				Me.OncustupdatedateChanging(value)
				Me.SendPropertyChanging
				Me._custupdatedate = value
				Me.SendPropertyChanged("custupdatedate")
				Me.OncustupdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property customerid() As Integer
		Get
			Return Me._customerid
		End Get
		Set
			If ((Me._customerid = value)  _
						= false) Then
				Me.OncustomeridChanging(value)
				Me.SendPropertyChanging
				Me._customerid = value
				Me.SendPropertyChanged("customerid")
				Me.OncustomeridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="customer_order", Storage:="_orders", ThisKey:="customerid", OtherKey:="customerid")>  _
	Public Property orders() As EntitySet(Of [order])
		Get
			Return Me._orders
		End Get
		Set
			Me._orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_orders(ByVal entity As [order])
		Me.SendPropertyChanging
		entity.customer = Me
	End Sub
	
	Private Sub detach_orders(ByVal entity As [order])
		Me.SendPropertyChanging
		entity.customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.menu")>  _
Partial Public Class menu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _menuid As Integer
	
	Private _restaurantid As Integer
	
	Private _menutype As String
	
	Private _menustartdate As Date
	
	Private _menuexpirydate As Date
	
	Private _menucomment As String
	
	Private _menuupdatedate As Date
	
	Private _menuitems As EntitySet(Of menuitem)
	
	Private _restaurant As EntityRef(Of restaurant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmenuidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuidChanged()
    End Sub
    Partial Private Sub OnrestaurantidChanging(value As Integer)
    End Sub
    Partial Private Sub OnrestaurantidChanged()
    End Sub
    Partial Private Sub OnmenutypeChanging(value As String)
    End Sub
    Partial Private Sub OnmenutypeChanged()
    End Sub
    Partial Private Sub OnmenustartdateChanging(value As Date)
    End Sub
    Partial Private Sub OnmenustartdateChanged()
    End Sub
    Partial Private Sub OnmenuexpirydateChanging(value As Date)
    End Sub
    Partial Private Sub OnmenuexpirydateChanged()
    End Sub
    Partial Private Sub OnmenucommentChanging(value As String)
    End Sub
    Partial Private Sub OnmenucommentChanged()
    End Sub
    Partial Private Sub OnmenuupdatedateChanging(value As Date)
    End Sub
    Partial Private Sub OnmenuupdatedateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._menuitems = New EntitySet(Of menuitem)(AddressOf Me.attach_menuitems, AddressOf Me.detach_menuitems)
		Me._restaurant = CType(Nothing, EntityRef(Of restaurant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property menuid() As Integer
		Get
			Return Me._menuid
		End Get
		Set
			If ((Me._menuid = value)  _
						= false) Then
				Me.OnmenuidChanging(value)
				Me.SendPropertyChanging
				Me._menuid = value
				Me.SendPropertyChanged("menuid")
				Me.OnmenuidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restaurantid", DbType:="Int NOT NULL")>  _
	Public Property restaurantid() As Integer
		Get
			Return Me._restaurantid
		End Get
		Set
			If ((Me._restaurantid = value)  _
						= false) Then
				If Me._restaurant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrestaurantidChanging(value)
				Me.SendPropertyChanging
				Me._restaurantid = value
				Me.SendPropertyChanged("restaurantid")
				Me.OnrestaurantidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menutype", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property menutype() As String
		Get
			Return Me._menutype
		End Get
		Set
			If (String.Equals(Me._menutype, value) = false) Then
				Me.OnmenutypeChanging(value)
				Me.SendPropertyChanging
				Me._menutype = value
				Me.SendPropertyChanged("menutype")
				Me.OnmenutypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menustartdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property menustartdate() As Date
		Get
			Return Me._menustartdate
		End Get
		Set
			If ((Me._menustartdate = value)  _
						= false) Then
				Me.OnmenustartdateChanging(value)
				Me.SendPropertyChanging
				Me._menustartdate = value
				Me.SendPropertyChanged("menustartdate")
				Me.OnmenustartdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuexpirydate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property menuexpirydate() As Date
		Get
			Return Me._menuexpirydate
		End Get
		Set
			If ((Me._menuexpirydate = value)  _
						= false) Then
				Me.OnmenuexpirydateChanging(value)
				Me.SendPropertyChanging
				Me._menuexpirydate = value
				Me.SendPropertyChanged("menuexpirydate")
				Me.OnmenuexpirydateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menucomment", DbType:="NVarChar(100)")>  _
	Public Property menucomment() As String
		Get
			Return Me._menucomment
		End Get
		Set
			If (String.Equals(Me._menucomment, value) = false) Then
				Me.OnmenucommentChanging(value)
				Me.SendPropertyChanging
				Me._menucomment = value
				Me.SendPropertyChanged("menucomment")
				Me.OnmenucommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuupdatedate", DbType:="DateTime NOT NULL")>  _
	Public Property menuupdatedate() As Date
		Get
			Return Me._menuupdatedate
		End Get
		Set
			If ((Me._menuupdatedate = value)  _
						= false) Then
				Me.OnmenuupdatedateChanging(value)
				Me.SendPropertyChanging
				Me._menuupdatedate = value
				Me.SendPropertyChanged("menuupdatedate")
				Me.OnmenuupdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="menu_menuitem", Storage:="_menuitems", ThisKey:="menuid", OtherKey:="menuid")>  _
	Public Property menuitems() As EntitySet(Of menuitem)
		Get
			Return Me._menuitems
		End Get
		Set
			Me._menuitems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="restaurant_menu", Storage:="_restaurant", ThisKey:="restaurantid", OtherKey:="restaurantid", IsForeignKey:=true)>  _
	Public Property restaurant() As restaurant
		Get
			Return Me._restaurant.Entity
		End Get
		Set
			Dim previousValue As restaurant = Me._restaurant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._restaurant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._restaurant.Entity = Nothing
					previousValue.menus.Remove(Me)
				End If
				Me._restaurant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.menus.Add(Me)
					Me._restaurantid = value.restaurantid
				Else
					Me._restaurantid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("restaurant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_menuitems(ByVal entity As menuitem)
		Me.SendPropertyChanging
		entity.menu = Me
	End Sub
	
	Private Sub detach_menuitems(ByVal entity As menuitem)
		Me.SendPropertyChanging
		entity.menu = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.menuitem")>  _
Partial Public Class menuitem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _menuitemid As Integer
	
	Private _menuid As Integer
	
	Private _itemname As String
	
	Private _itemdescription As String
	
	Private _itemimage As System.Data.Linq.Binary
	
	Private _itemprice As Decimal
	
	Private _itempreptime As Integer
	
	Private _itemcomment As String
	
	Private _itemupdatedate As Date
	
	Private _orderlines As EntitySet(Of orderline)
	
	Private _menu As EntityRef(Of menu)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmenuitemidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuitemidChanged()
    End Sub
    Partial Private Sub OnmenuidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuidChanged()
    End Sub
    Partial Private Sub OnitemnameChanging(value As String)
    End Sub
    Partial Private Sub OnitemnameChanged()
    End Sub
    Partial Private Sub OnitemdescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnitemdescriptionChanged()
    End Sub
    Partial Private Sub OnitemimageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnitemimageChanged()
    End Sub
    Partial Private Sub OnitempriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnitempriceChanged()
    End Sub
    Partial Private Sub OnitempreptimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnitempreptimeChanged()
    End Sub
    Partial Private Sub OnitemcommentChanging(value As String)
    End Sub
    Partial Private Sub OnitemcommentChanged()
    End Sub
    Partial Private Sub OnitemupdatedateChanging(value As Date)
    End Sub
    Partial Private Sub OnitemupdatedateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orderlines = New EntitySet(Of orderline)(AddressOf Me.attach_orderlines, AddressOf Me.detach_orderlines)
		Me._menu = CType(Nothing, EntityRef(Of menu))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuitemid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property menuitemid() As Integer
		Get
			Return Me._menuitemid
		End Get
		Set
			If ((Me._menuitemid = value)  _
						= false) Then
				Me.OnmenuitemidChanging(value)
				Me.SendPropertyChanging
				Me._menuitemid = value
				Me.SendPropertyChanged("menuitemid")
				Me.OnmenuitemidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuid", DbType:="Int NOT NULL")>  _
	Public Property menuid() As Integer
		Get
			Return Me._menuid
		End Get
		Set
			If ((Me._menuid = value)  _
						= false) Then
				If Me._menu.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmenuidChanging(value)
				Me.SendPropertyChanging
				Me._menuid = value
				Me.SendPropertyChanged("menuid")
				Me.OnmenuidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property itemname() As String
		Get
			Return Me._itemname
		End Get
		Set
			If (String.Equals(Me._itemname, value) = false) Then
				Me.OnitemnameChanging(value)
				Me.SendPropertyChanging
				Me._itemname = value
				Me.SendPropertyChanged("itemname")
				Me.OnitemnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemdescription", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property itemdescription() As String
		Get
			Return Me._itemdescription
		End Get
		Set
			If (String.Equals(Me._itemdescription, value) = false) Then
				Me.OnitemdescriptionChanging(value)
				Me.SendPropertyChanging
				Me._itemdescription = value
				Me.SendPropertyChanged("itemdescription")
				Me.OnitemdescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemimage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property itemimage() As System.Data.Linq.Binary
		Get
			Return Me._itemimage
		End Get
		Set
			If (Object.Equals(Me._itemimage, value) = false) Then
				Me.OnitemimageChanging(value)
				Me.SendPropertyChanging
				Me._itemimage = value
				Me.SendPropertyChanged("itemimage")
				Me.OnitemimageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemprice", DbType:="Money NOT NULL")>  _
	Public Property itemprice() As Decimal
		Get
			Return Me._itemprice
		End Get
		Set
			If ((Me._itemprice = value)  _
						= false) Then
				Me.OnitempriceChanging(value)
				Me.SendPropertyChanging
				Me._itemprice = value
				Me.SendPropertyChanged("itemprice")
				Me.OnitempriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itempreptime", DbType:="Int NOT NULL")>  _
	Public Property itempreptime() As Integer
		Get
			Return Me._itempreptime
		End Get
		Set
			If ((Me._itempreptime = value)  _
						= false) Then
				Me.OnitempreptimeChanging(value)
				Me.SendPropertyChanging
				Me._itempreptime = value
				Me.SendPropertyChanged("itempreptime")
				Me.OnitempreptimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemcomment", DbType:="NVarChar(100)")>  _
	Public Property itemcomment() As String
		Get
			Return Me._itemcomment
		End Get
		Set
			If (String.Equals(Me._itemcomment, value) = false) Then
				Me.OnitemcommentChanging(value)
				Me.SendPropertyChanging
				Me._itemcomment = value
				Me.SendPropertyChanged("itemcomment")
				Me.OnitemcommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemupdatedate", DbType:="DateTime NOT NULL")>  _
	Public Property itemupdatedate() As Date
		Get
			Return Me._itemupdatedate
		End Get
		Set
			If ((Me._itemupdatedate = value)  _
						= false) Then
				Me.OnitemupdatedateChanging(value)
				Me.SendPropertyChanging
				Me._itemupdatedate = value
				Me.SendPropertyChanged("itemupdatedate")
				Me.OnitemupdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="menuitem_orderline", Storage:="_orderlines", ThisKey:="menuitemid", OtherKey:="menuitemid")>  _
	Public Property orderlines() As EntitySet(Of orderline)
		Get
			Return Me._orderlines
		End Get
		Set
			Me._orderlines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="menu_menuitem", Storage:="_menu", ThisKey:="menuid", OtherKey:="menuid", IsForeignKey:=true)>  _
	Public Property menu() As menu
		Get
			Return Me._menu.Entity
		End Get
		Set
			Dim previousValue As menu = Me._menu.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._menu.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._menu.Entity = Nothing
					previousValue.menuitems.Remove(Me)
				End If
				Me._menu.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.menuitems.Add(Me)
					Me._menuid = value.menuid
				Else
					Me._menuid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("menu")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_orderlines(ByVal entity As orderline)
		Me.SendPropertyChanging
		entity.menuitem = Me
	End Sub
	
	Private Sub detach_orderlines(ByVal entity As orderline)
		Me.SendPropertyChanging
		entity.menuitem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[order]")>  _
Partial Public Class [order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _customerid As Integer
	
	Private _orderdate As Date
	
	Private _orderduedate As Date
	
	Private _orderstatus As Byte
	
	Private _ordertotal As System.Nullable(Of Decimal)
	
	Private _ordertrackingid As Byte
	
	Private _orderdeliverytime As System.TimeSpan
	
	Private _ordercollectdeliver As Char
	
	Private _ordercomment As String
	
	Private _orderid As Integer
	
	Private _orderlines As EntitySet(Of orderline)
	
	Private _customer As EntityRef(Of customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustomeridChanging(value As Integer)
    End Sub
    Partial Private Sub OncustomeridChanged()
    End Sub
    Partial Private Sub OnorderdateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderdateChanged()
    End Sub
    Partial Private Sub OnorderduedateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderduedateChanged()
    End Sub
    Partial Private Sub OnorderstatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnorderstatusChanged()
    End Sub
    Partial Private Sub OnordertotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnordertotalChanged()
    End Sub
    Partial Private Sub OnordertrackingidChanging(value As Byte)
    End Sub
    Partial Private Sub OnordertrackingidChanged()
    End Sub
    Partial Private Sub OnorderdeliverytimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnorderdeliverytimeChanged()
    End Sub
    Partial Private Sub OnordercollectdeliverChanging(value As Char)
    End Sub
    Partial Private Sub OnordercollectdeliverChanged()
    End Sub
    Partial Private Sub OnordercommentChanging(value As String)
    End Sub
    Partial Private Sub OnordercommentChanged()
    End Sub
    Partial Private Sub OnorderidChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orderlines = New EntitySet(Of orderline)(AddressOf Me.attach_orderlines, AddressOf Me.detach_orderlines)
		Me._customer = CType(Nothing, EntityRef(Of customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerid", DbType:="Int NOT NULL")>  _
	Public Property customerid() As Integer
		Get
			Return Me._customerid
		End Get
		Set
			If ((Me._customerid = value)  _
						= false) Then
				If Me._customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomeridChanging(value)
				Me.SendPropertyChanging
				Me._customerid = value
				Me.SendPropertyChanged("customerid")
				Me.OncustomeridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property orderdate() As Date
		Get
			Return Me._orderdate
		End Get
		Set
			If ((Me._orderdate = value)  _
						= false) Then
				Me.OnorderdateChanging(value)
				Me.SendPropertyChanging
				Me._orderdate = value
				Me.SendPropertyChanged("orderdate")
				Me.OnorderdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderduedate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property orderduedate() As Date
		Get
			Return Me._orderduedate
		End Get
		Set
			If ((Me._orderduedate = value)  _
						= false) Then
				Me.OnorderduedateChanging(value)
				Me.SendPropertyChanging
				Me._orderduedate = value
				Me.SendPropertyChanged("orderduedate")
				Me.OnorderduedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderstatus", DbType:="TinyInt NOT NULL")>  _
	Public Property orderstatus() As Byte
		Get
			Return Me._orderstatus
		End Get
		Set
			If ((Me._orderstatus = value)  _
						= false) Then
				Me.OnorderstatusChanging(value)
				Me.SendPropertyChanging
				Me._orderstatus = value
				Me.SendPropertyChanged("orderstatus")
				Me.OnorderstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordertotal", DbType:="Money")>  _
	Public Property ordertotal() As System.Nullable(Of Decimal)
		Get
			Return Me._ordertotal
		End Get
		Set
			If (Me._ordertotal.Equals(value) = false) Then
				Me.OnordertotalChanging(value)
				Me.SendPropertyChanging
				Me._ordertotal = value
				Me.SendPropertyChanged("ordertotal")
				Me.OnordertotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordertrackingid", DbType:="TinyInt NOT NULL")>  _
	Public Property ordertrackingid() As Byte
		Get
			Return Me._ordertrackingid
		End Get
		Set
			If ((Me._ordertrackingid = value)  _
						= false) Then
				Me.OnordertrackingidChanging(value)
				Me.SendPropertyChanging
				Me._ordertrackingid = value
				Me.SendPropertyChanged("ordertrackingid")
				Me.OnordertrackingidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderdeliverytime", DbType:="Time NOT NULL")>  _
	Public Property orderdeliverytime() As System.TimeSpan
		Get
			Return Me._orderdeliverytime
		End Get
		Set
			If ((Me._orderdeliverytime = value)  _
						= false) Then
				Me.OnorderdeliverytimeChanging(value)
				Me.SendPropertyChanging
				Me._orderdeliverytime = value
				Me.SendPropertyChanged("orderdeliverytime")
				Me.OnorderdeliverytimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordercollectdeliver", DbType:="NChar(1) NOT NULL")>  _
	Public Property ordercollectdeliver() As Char
		Get
			Return Me._ordercollectdeliver
		End Get
		Set
			If ((Me._ordercollectdeliver = value)  _
						= false) Then
				Me.OnordercollectdeliverChanging(value)
				Me.SendPropertyChanging
				Me._ordercollectdeliver = value
				Me.SendPropertyChanged("ordercollectdeliver")
				Me.OnordercollectdeliverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordercomment", DbType:="NVarChar(100)")>  _
	Public Property ordercomment() As String
		Get
			Return Me._ordercomment
		End Get
		Set
			If (String.Equals(Me._ordercomment, value) = false) Then
				Me.OnordercommentChanging(value)
				Me.SendPropertyChanging
				Me._ordercomment = value
				Me.SendPropertyChanged("ordercomment")
				Me.OnordercommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property orderid() As Integer
		Get
			Return Me._orderid
		End Get
		Set
			If ((Me._orderid = value)  _
						= false) Then
				Me.OnorderidChanging(value)
				Me.SendPropertyChanging
				Me._orderid = value
				Me.SendPropertyChanged("orderid")
				Me.OnorderidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="order_orderline", Storage:="_orderlines", ThisKey:="orderid", OtherKey:="orderid")>  _
	Public Property orderlines() As EntitySet(Of orderline)
		Get
			Return Me._orderlines
		End Get
		Set
			Me._orderlines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="customer_order", Storage:="_customer", ThisKey:="customerid", OtherKey:="customerid", IsForeignKey:=true)>  _
	Public Property customer() As customer
		Get
			Return Me._customer.Entity
		End Get
		Set
			Dim previousValue As customer = Me._customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._customer.Entity = Nothing
					previousValue.orders.Remove(Me)
				End If
				Me._customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orders.Add(Me)
					Me._customerid = value.customerid
				Else
					Me._customerid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_orderlines(ByVal entity As orderline)
		Me.SendPropertyChanging
		entity.[order] = Me
	End Sub
	
	Private Sub detach_orderlines(ByVal entity As orderline)
		Me.SendPropertyChanging
		entity.[order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.orderline")>  _
Partial Public Class orderline
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderid As Integer
	
	Private _orderlineno As Integer
	
	Private _menuitemid As Integer
	
	Private _linequantity As Short
	
	Private _linestatus As Byte
	
	Private _lineprice As System.Nullable(Of Decimal)
	
	Private _linepreptime As System.Nullable(Of Short)
	
	Private _linecomment As String
	
	Private _menuitem As EntityRef(Of menuitem)
	
	Private _order As EntityRef(Of [order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderidChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderidChanged()
    End Sub
    Partial Private Sub OnorderlinenoChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderlinenoChanged()
    End Sub
    Partial Private Sub OnmenuitemidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuitemidChanged()
    End Sub
    Partial Private Sub OnlinequantityChanging(value As Short)
    End Sub
    Partial Private Sub OnlinequantityChanged()
    End Sub
    Partial Private Sub OnlinestatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnlinestatusChanged()
    End Sub
    Partial Private Sub OnlinepriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlinepriceChanged()
    End Sub
    Partial Private Sub OnlinepreptimeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnlinepreptimeChanged()
    End Sub
    Partial Private Sub OnlinecommentChanging(value As String)
    End Sub
    Partial Private Sub OnlinecommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._menuitem = CType(Nothing, EntityRef(Of menuitem))
		Me._order = CType(Nothing, EntityRef(Of [order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property orderid() As Integer
		Get
			Return Me._orderid
		End Get
		Set
			If ((Me._orderid = value)  _
						= false) Then
				If Me._order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderidChanging(value)
				Me.SendPropertyChanging
				Me._orderid = value
				Me.SendPropertyChanged("orderid")
				Me.OnorderidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderlineno", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property orderlineno() As Integer
		Get
			Return Me._orderlineno
		End Get
		Set
			If ((Me._orderlineno = value)  _
						= false) Then
				Me.OnorderlinenoChanging(value)
				Me.SendPropertyChanging
				Me._orderlineno = value
				Me.SendPropertyChanged("orderlineno")
				Me.OnorderlinenoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuitemid", DbType:="Int NOT NULL")>  _
	Public Property menuitemid() As Integer
		Get
			Return Me._menuitemid
		End Get
		Set
			If ((Me._menuitemid = value)  _
						= false) Then
				If Me._menuitem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmenuitemidChanging(value)
				Me.SendPropertyChanging
				Me._menuitemid = value
				Me.SendPropertyChanged("menuitemid")
				Me.OnmenuitemidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linequantity", DbType:="SmallInt NOT NULL")>  _
	Public Property linequantity() As Short
		Get
			Return Me._linequantity
		End Get
		Set
			If ((Me._linequantity = value)  _
						= false) Then
				Me.OnlinequantityChanging(value)
				Me.SendPropertyChanging
				Me._linequantity = value
				Me.SendPropertyChanged("linequantity")
				Me.OnlinequantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linestatus", DbType:="TinyInt NOT NULL")>  _
	Public Property linestatus() As Byte
		Get
			Return Me._linestatus
		End Get
		Set
			If ((Me._linestatus = value)  _
						= false) Then
				Me.OnlinestatusChanging(value)
				Me.SendPropertyChanging
				Me._linestatus = value
				Me.SendPropertyChanged("linestatus")
				Me.OnlinestatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lineprice", DbType:="Money")>  _
	Public Property lineprice() As System.Nullable(Of Decimal)
		Get
			Return Me._lineprice
		End Get
		Set
			If (Me._lineprice.Equals(value) = false) Then
				Me.OnlinepriceChanging(value)
				Me.SendPropertyChanging
				Me._lineprice = value
				Me.SendPropertyChanged("lineprice")
				Me.OnlinepriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linepreptime", DbType:="SmallInt")>  _
	Public Property linepreptime() As System.Nullable(Of Short)
		Get
			Return Me._linepreptime
		End Get
		Set
			If (Me._linepreptime.Equals(value) = false) Then
				Me.OnlinepreptimeChanging(value)
				Me.SendPropertyChanging
				Me._linepreptime = value
				Me.SendPropertyChanged("linepreptime")
				Me.OnlinepreptimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linecomment", DbType:="NVarChar(100)")>  _
	Public Property linecomment() As String
		Get
			Return Me._linecomment
		End Get
		Set
			If (String.Equals(Me._linecomment, value) = false) Then
				Me.OnlinecommentChanging(value)
				Me.SendPropertyChanging
				Me._linecomment = value
				Me.SendPropertyChanged("linecomment")
				Me.OnlinecommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="menuitem_orderline", Storage:="_menuitem", ThisKey:="menuitemid", OtherKey:="menuitemid", IsForeignKey:=true)>  _
	Public Property menuitem() As menuitem
		Get
			Return Me._menuitem.Entity
		End Get
		Set
			Dim previousValue As menuitem = Me._menuitem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._menuitem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._menuitem.Entity = Nothing
					previousValue.orderlines.Remove(Me)
				End If
				Me._menuitem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orderlines.Add(Me)
					Me._menuitemid = value.menuitemid
				Else
					Me._menuitemid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("menuitem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="order_orderline", Storage:="_order", ThisKey:="orderid", OtherKey:="orderid", IsForeignKey:=true)>  _
	Public Property [order]() As [order]
		Get
			Return Me._order.Entity
		End Get
		Set
			Dim previousValue As [order] = Me._order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._order.Entity = Nothing
					previousValue.orderlines.Remove(Me)
				End If
				Me._order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orderlines.Add(Me)
					Me._orderid = value.orderid
				Else
					Me._orderid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.restaurant")>  _
Partial Public Class restaurant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _restaurantid As Integer
	
	Private _categoryid As Integer
	
	Private _restname As String
	
	Private _restaddress1 As String
	
	Private _restaddress2 As String
	
	Private _restaddress3 As String
	
	Private _restpostcode As String
	
	Private _restdescription As String
	
	Private _resttelno As String
	
	Private _restemail As String
	
	Private _restimage As System.Data.Linq.Binary
	
	Private _restcomment As String
	
	Private _restupdatedate As Date
	
	Private _menus As EntitySet(Of menu)
	
	Private _category As EntityRef(Of category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrestaurantidChanging(value As Integer)
    End Sub
    Partial Private Sub OnrestaurantidChanged()
    End Sub
    Partial Private Sub OncategoryidChanging(value As Integer)
    End Sub
    Partial Private Sub OncategoryidChanged()
    End Sub
    Partial Private Sub OnrestnameChanging(value As String)
    End Sub
    Partial Private Sub OnrestnameChanged()
    End Sub
    Partial Private Sub Onrestaddress1Changing(value As String)
    End Sub
    Partial Private Sub Onrestaddress1Changed()
    End Sub
    Partial Private Sub Onrestaddress2Changing(value As String)
    End Sub
    Partial Private Sub Onrestaddress2Changed()
    End Sub
    Partial Private Sub Onrestaddress3Changing(value As String)
    End Sub
    Partial Private Sub Onrestaddress3Changed()
    End Sub
    Partial Private Sub OnrestpostcodeChanging(value As String)
    End Sub
    Partial Private Sub OnrestpostcodeChanged()
    End Sub
    Partial Private Sub OnrestdescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnrestdescriptionChanged()
    End Sub
    Partial Private Sub OnresttelnoChanging(value As String)
    End Sub
    Partial Private Sub OnresttelnoChanged()
    End Sub
    Partial Private Sub OnrestemailChanging(value As String)
    End Sub
    Partial Private Sub OnrestemailChanged()
    End Sub
    Partial Private Sub OnrestimageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnrestimageChanged()
    End Sub
    Partial Private Sub OnrestcommentChanging(value As String)
    End Sub
    Partial Private Sub OnrestcommentChanged()
    End Sub
    Partial Private Sub OnrestupdatedateChanging(value As Date)
    End Sub
    Partial Private Sub OnrestupdatedateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._menus = New EntitySet(Of menu)(AddressOf Me.attach_menus, AddressOf Me.detach_menus)
		Me._category = CType(Nothing, EntityRef(Of category))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restaurantid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property restaurantid() As Integer
		Get
			Return Me._restaurantid
		End Get
		Set
			If ((Me._restaurantid = value)  _
						= false) Then
				Me.OnrestaurantidChanging(value)
				Me.SendPropertyChanging
				Me._restaurantid = value
				Me.SendPropertyChanged("restaurantid")
				Me.OnrestaurantidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryid", DbType:="Int NOT NULL")>  _
	Public Property categoryid() As Integer
		Get
			Return Me._categoryid
		End Get
		Set
			If ((Me._categoryid = value)  _
						= false) Then
				If Me._category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncategoryidChanging(value)
				Me.SendPropertyChanging
				Me._categoryid = value
				Me.SendPropertyChanged("categoryid")
				Me.OncategoryidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property restname() As String
		Get
			Return Me._restname
		End Get
		Set
			If (String.Equals(Me._restname, value) = false) Then
				Me.OnrestnameChanging(value)
				Me.SendPropertyChanging
				Me._restname = value
				Me.SendPropertyChanged("restname")
				Me.OnrestnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restaddress1", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property restaddress1() As String
		Get
			Return Me._restaddress1
		End Get
		Set
			If (String.Equals(Me._restaddress1, value) = false) Then
				Me.Onrestaddress1Changing(value)
				Me.SendPropertyChanging
				Me._restaddress1 = value
				Me.SendPropertyChanged("restaddress1")
				Me.Onrestaddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restaddress2", DbType:="NVarChar(100)")>  _
	Public Property restaddress2() As String
		Get
			Return Me._restaddress2
		End Get
		Set
			If (String.Equals(Me._restaddress2, value) = false) Then
				Me.Onrestaddress2Changing(value)
				Me.SendPropertyChanging
				Me._restaddress2 = value
				Me.SendPropertyChanged("restaddress2")
				Me.Onrestaddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restaddress3", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property restaddress3() As String
		Get
			Return Me._restaddress3
		End Get
		Set
			If (String.Equals(Me._restaddress3, value) = false) Then
				Me.Onrestaddress3Changing(value)
				Me.SendPropertyChanging
				Me._restaddress3 = value
				Me.SendPropertyChanged("restaddress3")
				Me.Onrestaddress3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restpostcode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property restpostcode() As String
		Get
			Return Me._restpostcode
		End Get
		Set
			If (String.Equals(Me._restpostcode, value) = false) Then
				Me.OnrestpostcodeChanging(value)
				Me.SendPropertyChanging
				Me._restpostcode = value
				Me.SendPropertyChanged("restpostcode")
				Me.OnrestpostcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restdescription", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property restdescription() As String
		Get
			Return Me._restdescription
		End Get
		Set
			If (String.Equals(Me._restdescription, value) = false) Then
				Me.OnrestdescriptionChanging(value)
				Me.SendPropertyChanging
				Me._restdescription = value
				Me.SendPropertyChanged("restdescription")
				Me.OnrestdescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resttelno", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property resttelno() As String
		Get
			Return Me._resttelno
		End Get
		Set
			If (String.Equals(Me._resttelno, value) = false) Then
				Me.OnresttelnoChanging(value)
				Me.SendPropertyChanging
				Me._resttelno = value
				Me.SendPropertyChanged("resttelno")
				Me.OnresttelnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restemail", DbType:="NVarChar(50)")>  _
	Public Property restemail() As String
		Get
			Return Me._restemail
		End Get
		Set
			If (String.Equals(Me._restemail, value) = false) Then
				Me.OnrestemailChanging(value)
				Me.SendPropertyChanging
				Me._restemail = value
				Me.SendPropertyChanged("restemail")
				Me.OnrestemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restimage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property restimage() As System.Data.Linq.Binary
		Get
			Return Me._restimage
		End Get
		Set
			If (Object.Equals(Me._restimage, value) = false) Then
				Me.OnrestimageChanging(value)
				Me.SendPropertyChanging
				Me._restimage = value
				Me.SendPropertyChanged("restimage")
				Me.OnrestimageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restcomment", DbType:="NVarChar(100)")>  _
	Public Property restcomment() As String
		Get
			Return Me._restcomment
		End Get
		Set
			If (String.Equals(Me._restcomment, value) = false) Then
				Me.OnrestcommentChanging(value)
				Me.SendPropertyChanging
				Me._restcomment = value
				Me.SendPropertyChanged("restcomment")
				Me.OnrestcommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_restupdatedate", DbType:="DateTime NOT NULL")>  _
	Public Property restupdatedate() As Date
		Get
			Return Me._restupdatedate
		End Get
		Set
			If ((Me._restupdatedate = value)  _
						= false) Then
				Me.OnrestupdatedateChanging(value)
				Me.SendPropertyChanging
				Me._restupdatedate = value
				Me.SendPropertyChanged("restupdatedate")
				Me.OnrestupdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="restaurant_menu", Storage:="_menus", ThisKey:="restaurantid", OtherKey:="restaurantid")>  _
	Public Property menus() As EntitySet(Of menu)
		Get
			Return Me._menus
		End Get
		Set
			Me._menus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="category_restaurant", Storage:="_category", ThisKey:="categoryid", OtherKey:="categoryid", IsForeignKey:=true)>  _
	Public Property category() As category
		Get
			Return Me._category.Entity
		End Get
		Set
			Dim previousValue As category = Me._category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._category.Entity = Nothing
					previousValue.restaurants.Remove(Me)
				End If
				Me._category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.restaurants.Add(Me)
					Me._categoryid = value.categoryid
				Else
					Me._categoryid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_menus(ByVal entity As menu)
		Me.SendPropertyChanging
		entity.restaurant = Me
	End Sub
	
	Private Sub detach_menus(ByVal entity As menu)
		Me.SendPropertyChanging
		entity.restaurant = Nothing
	End Sub
End Class
